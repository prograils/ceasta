// Generated by CoffeeScript 2.2.3
(function() {
  var TextArea;

  TextArea = (function() {
    var focusEvents, inputEvent, restoreSelection, saveSelection;

    class TextArea {
      constructor($container, placeholder = 'Test', highlight = 'Lorem') {
        this.$container = $container;
        this.placeholder = placeholder;
        this.highlight = highlight;
        this.value = this.$container.val();
        this.test = null;
        this.init();
      }

      init() {
        this.setPlaceholder();
        inputEvent(this, this.$container, this.highlight);
        return focusEvents(this, this.$container, this.placeholder);
      }

      val(value = null) {
        if (value === null) {
          return this.value;
        } else {
          this.$container.text(value);
          return this.value = value;
        }
      }

      setCursor($container, position) {
        return _.each($container.get(0).childNodes, node, function() {});
      }

      setPlaceholder() {
        if (this.placeholderDisplay) {
          return;
        }
        this.$container.text(this.placeholder);
        return this.placeholderDisplay = true;
      }

      cleanPlaceholder() {
        if (!this.placeholderDisplay) {
          return;
        }
        this.$container.text('');
        return this.placeholderDisplay = false;
      }

    };

    inputEvent = function(textArea, $container, highlight) {
      return $container.on('input', function(e) {
        var ele, nodeArray, nodeIndex, offsetSum, parentIndex, parentNode, range, regexp, sel, start, startContainer, startNodesLength, startOffset;
        regexp = `\\b(${highlight}\\w*)`;
        textArea.value = $(this).text();
        textArea.test = saveSelection();
        startOffset = textArea.test.startOffset;
        startNodesLength = this.childNodes.length;
        startContainer = textArea.test.startContainer;
        parentNode = textArea.test.startContainer.parentNode;
        nodeArray = Array.from(this.childNodes);
        nodeIndex = nodeArray.indexOf(textArea.test.startContainer);
        startContainer = textArea.test.startContainer.cloneNode(true);
        if (parentNode !== this) {
          parentIndex = nodeArray.indexOf(textArea.test.startContainer.parentNode);
          nodeIndex = Array.from(parentNode.childNodes).indexOf(textArea.test.startContainer);
        } else {
          nodeIndex = nodeArray.indexOf(textArea.test.startContainer);
        }
        offsetSum = _.reduce(nodeArray.slice(0, parentIndex || nodeIndex), (function(sum, node) {
          return sum + node.textContent.length;
        }), startOffset);
        this.innerHTML = $(this).text().replace(new RegExp(regexp, "g"), "<b>$1</b>");
        range = document.createRange();
        if (startNodesLength !== this.childNodes.length) {
          // nodeArray = Array.from(this.childNodes)
          // nodeIndex = Math.abs(this.childNodes.length - startNodesLength)
          debugger;
          ele = _.find(Array.from(this.childNodes), function(ele) {
            if ((offsetSum - ele.textContent.length) <= 0) {
              return true;
            } else {
              offsetSum = offsetSum - ele.textContent.length;
              return false;
            }
          });
          if (ele.childNodes.length > 0) {
            range.setStart(ele.childNodes[0], offsetSum);
          } else {
            range.setStart(ele, offsetSum);
          }
        } else {
          if (parentIndex) {
            start = this.childNodes[parentIndex].childNodes[nodeIndex];
          } else {
            start = this.childNodes[nodeIndex];
          }
          range.setStart(start, startOffset);
        }
        range.collapse(true);
        sel = window.getSelection();
        sel.removeAllRanges();
        return sel.addRange(range);
      });
    };

    saveSelection = function() {
      if (window.getSelection) {
        return window.getSelection().getRangeAt(0);
      } else if (document.selection) {
        return document.selection.createRange();
      }
    };

    restoreSelection = function(textArea) {
      var isInFocus, s;
      isInFocus = true;
      // document.getElementById('textarea').focus()
      if (textArea.test !== null) {
        if (window.getSelection) {
          s = window.getSelection();
          if (s.rangeCount > 0) {
            s.removeAllRanges();
          }
          return s.addRange(textArea.test);
        } else if (document.createRange) {
          return window.getSelection().addRange(textArea.test);
        } else if (document.selection) {
          return textArea.test.select();
        }
      }
    };

    focusEvents = function(textArea, $container, placeholder) {
      $container.on('focusin', function(e) {
        return textArea.cleanPlaceholder();
      });
      return $container.on('focusout', function(e) {
        if ($(this).text()) {
          return;
        }
        return textArea.setPlaceholder();
      });
    };

    return TextArea;

  }).call(this);

  $(function() {
    var textArea;
    return textArea = new TextArea($('#textarea'), 'Lorem ipsum dolor sit amet, consectetur adipiscing elit');
  });

}).call(this);
